# Copyright 2018 Google LLC All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- $replicas := (int (default .Values.agones.controller.replicas .Values.agones.extensions.replicas)) }}
{{- if lt $replicas 1 }}
{{- fail "agones.controller.replica field has an invalid value!" }}
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agones-controller
  namespace: {{ .Release.Namespace }}
  labels:
    component: controller
    app: {{ template "agones.name" . }}
    chart: {{ template "agones.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      agones.dev/role: controller
      app: {{ template "agones.name" . }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
  replicas: {{ $replicas }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
{{- if eq $replicas 1 }}
        cluster-autoscaler.kubernetes.io/safe-to-evict: {{ default .Values.agones.controller.safeToEvict .Values.agones.extensions.safeToEvict | quote }}
{{- end }}
{{- if (default .Values.agones.controller.generateTLS .Values.agones.extensions.generateTLS) }}
        revision/tls-cert: {{ .Release.Revision | quote }}
{{- end }}
{{- if and (.Values.agones.metrics.prometheusServiceDiscovery) (.Values.agones.metrics.prometheusEnabled) }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
{{- end }}
{{- $annotations := default .Values.agones.controller.annotations .Values.agones.extensions.annotations }}
{{- if $annotations }}
{{- toYaml $annotations | nindent 8 }}
{{- end }}
      labels:
        agones.dev/role: controller
        app: {{ template "agones.name" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      {{- $topologySpreadConstraints := default .Values.agones.controller.topologySpreadConstraints .Values.agones.extensions.topologySpreadConstraints}}
      {{- if $topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml $topologySpreadConstraints | nindent 8 }}
      {{- end }}
      affinity:
      {{- $affinity := default .Values.agones.controller.affinity .Values.agones.extensions.affinity}}
      {{- if $affinity }}
      {{- if .Values.agones.requireDedicatedNodes }}
      {{- fail "agones.controller.affinity and agones.requireDedicatedNodes cannot be set at the same time!" }}
      {{- end}}
      {{- end}}
      {{- if $affinity }}
{{ toYaml $affinity | indent 8 }}
      {{- else}}
        nodeAffinity:
          {{- if .Values.agones.requireDedicatedNodes }}
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
          {{- else}}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
          {{- end }}
              - key: agones.dev/agones-system
                operator: Exists
      {{- end }}
      {{- $nodeSelector := default .Values.agones.controller.nodeSelector .Values.agones.extensions.nodeSelector }}
      {{- if $nodeSelector }}
      nodeSelector:
{{ toYaml $nodeSelector | indent 8 }}
      {{- end }}
      {{- $tolerations := default .Values.agones.controller.tolerations .Values.agones.extensions.tolerations }}
      {{- if $tolerations }}
      tolerations:
{{ toYaml $tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.agones.createPriorityClass }}
      priorityClassName: {{ .Values.agones.priorityClassName }}
      {{- end }}
      serviceAccountName: {{ .Values.agones.serviceaccount.controller.name }}
      containers:
      - name: agones-controller
        image: "{{ .Values.agones.image.registry }}/{{ .Values.agones.image.controller.name}}:{{ default .Values.agones.image.tag .Values.agones.image.controller.tag }}"
        imagePullPolicy: {{ .Values.agones.image.controller.pullPolicy }}
        env:
        # minimum port that can be exposed to GameServer traffic
        - name: MIN_PORT
          value: {{ .Values.gameservers.minPort | quote }}
        # maximum port that can be exposed to GameServer traffic
        - name: MAX_PORT
          value: {{ .Values.gameservers.maxPort | quote }}
        - name: SIDECAR_IMAGE # overwrite the GameServer sidecar image that is used
          value: "{{ .Values.agones.image.registry }}/{{ .Values.agones.image.sdk.name}}:{{ default .Values.agones.image.tag .Values.agones.image.sdk.tag }}"
        - name: ALWAYS_PULL_SIDECAR # set the sidecar imagePullPolicy to Always
          value: {{ .Values.agones.image.sdk.alwaysPull | quote }}
        - name: SIDECAR_CPU_REQUEST
          value: {{ .Values.agones.image.sdk.cpuRequest | quote }}
        - name: SIDECAR_CPU_LIMIT
          value: {{ .Values.agones.image.sdk.cpuLimit | quote }}
        - name: SIDECAR_MEMORY_REQUEST
          value: {{ .Values.agones.image.sdk.memoryRequest | quote }}
        - name: SIDECAR_MEMORY_LIMIT
          value: {{ .Values.agones.image.sdk.memoryLimit | quote }}
        - name: SDK_SERVICE_ACCOUNT
          value: {{ .Values.agones.serviceaccount.sdk.name | quote }}
        - name: PROMETHEUS_EXPORTER
          value: {{ .Values.agones.metrics.prometheusEnabled | quote }}
        - name: STACKDRIVER_EXPORTER
          value: {{ .Values.agones.metrics.stackdriverEnabled | quote }}
        - name: STACKDRIVER_LABELS
          value: {{ .Values.agones.metrics.stackdriverLabels | quote }}
        - name: GCP_PROJECT_ID
          value: {{ .Values.agones.metrics.stackdriverProjectID | quote }}
        - name: NUM_WORKERS
          value: {{ default .Values.agones.controller.numWorkers .Values.agones.extensions.numWorkers | quote }}
        - name: API_SERVER_QPS
          value: {{ default .Values.agones.controller.apiServerQPS .Values.agones.extensions.apiServerQPS | quote }}
        - name: API_SERVER_QPS_BURST
          value: {{ default .Values.agones.controller.apiServerQPSBurst .Values.agones.extensions.apiServerQPSBurst | quote }}
        - name: LOG_LEVEL
          value: {{ default .Values.agones.controller.logLevel .Values.agones.extensions.logLevel | quote }}
        - name: FEATURE_GATES
          value: {{ .Values.agones.featureGates | quote }}
        - name: ALLOCATION_BATCH_WAIT_TIME
          value: {{ default .Values.agones.controller.allocationBatchWaitTime .Values.agones.extensions.allocationBatchWaitTime | quote }}
        - name: CLOUD_PRODUCT
          value: {{ .Values.agones.cloudProduct | quote }}
{{- if default .Values.agones.controller.persistentLogs .Values.agones.extensions.persistentLogs }}
        - name: LOG_DIR
          value: "/logs"
        - name: LOG_SIZE_LIMIT_MB
          value: {{ default .Values.agones.controller.persistentLogsSizeLimitMB .Values.agones.extensions.persistentLogsSizeLimitMB | quote }}
{{- end }}
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONTAINER_NAME
          value: "agones-controller"
        {{- if gt $replicas 1 }}
        - name: LEADER_ELECTION
          value: "true"
        {{- end }}
        ports:
        - name: webhooks
          containerPort: 8081
        - name: http
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: {{ default .Values.agones.controller.healthCheck.initialDelaySeconds .Values.agones.extensions.healthCheck.initialDelaySeconds }}
          periodSeconds: {{ default .Values.agones.controller.healthCheck.periodSeconds .Values.agones.extensions.healthCheck.periodSeconds }}
          failureThreshold: {{ default .Values.agones.controller.healthCheck.failureThreshold .Values.agones.extensions.healthCheck.failureThreshold }}
          timeoutSeconds: {{ default .Values.agones.controller.healthCheck.timeoutSeconds .Values.agones.extensions.healthCheck.timeoutSeconds }}
        resources:
{{- if default .Values.agones.controller.resources .Values.agones.extensions.resources }}
{{ toYaml default .Values.agones.controller.resources .Values.agones.extensions.resources | indent 10 }}
{{- else}}
          limits:
            ephemeral-storage: {{ add (default .Values.agones.controller.persistentLogsSizeLimitMB .Values.agones.extensions.persistentLogsSizeLimitMB) 100 | printf "%dMi" }}
          requests:
            ephemeral-storage: {{ add (default .Values.agones.controller.persistentLogsSizeLimitMB .Values.agones.extensions.persistentLogsSizeLimitMB) 100 | printf "%dMi" }}
{{- end }}
        volumeMounts:
        - name: certs
          mountPath: /certs
          readOnly: true
{{- if default .Values.agones.controller.persistentLogs .Values.agones.extensions.persistentLogs }}
        - name: logs
          mountPath: /logs
          readOnly: false
{{- end }}
      volumes:
      - name: certs
        secret:
          secretName: {{ template "agones.fullname" . }}-cert
{{- $customCertSecretPath := default .Values.agones.controller.customCertSecretPath .Values.agones.extensions.customCertSecretPath}}
{{- if $customCertSecretPath }}
          items:
{{- toYaml $customCertSecretPath | nindent 10 }}
{{- end }}
{{- if default .Values.agones.controller.persistentLogs .Values.agones.extensions.persistentLogs }}
      - name: logs
        emptyDir: {}
{{- end }}
{{- if .Values.agones.image.controller.pullSecret }}
      imagePullSecrets:
        - name: {{.Values.agones.image.controller.pullSecret}}
{{- end }}
---
{{- if gt $replicas 1 }}
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: agones-controller-pdb
spec:
{{- if default .Values.agones.controller.pdb.minAvailable .Values.agones.extensions.pdb.minAvailable }}
{{- if default .Values.agones.controller.pdb.maxUnavailable .Values.agones.extensions.pdb.maxUnavailable }}
{{- fail "minAvailable and maxUnavailable are mutually exclusive!" }}
{{- end}}
{{- end}}
  minAvailable: {{ default .Values.agones.controller.pdb.minAvailable .Values.agones.extensions.pdb.minAvailable }}
  maxUnavailable: {{ default .Values.agones.controller.pdb.maxUnavailable .Values.agones.extensions.pdb.maxUnavailable }}
  selector:
    matchLabels:
      agones.dev/role: controller
      app: {{ template "agones.name" . }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
{{- end }}